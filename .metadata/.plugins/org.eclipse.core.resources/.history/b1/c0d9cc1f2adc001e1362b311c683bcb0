package br.com.magnasistemas.api_saude.validators.implementers.consulta;

import java.time.LocalDateTime;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import br.com.magnasistemas.api_saude.dto.consulta.DadosAtualizarConsulta;
import br.com.magnasistemas.api_saude.entity.Consulta;
import br.com.magnasistemas.api_saude.exception.ArgumentoInvalidoException;
import br.com.magnasistemas.api_saude.repository.EspecialidadeRepository;
import br.com.magnasistemas.api_saude.repository.MedicoRepository;
import br.com.magnasistemas.api_saude.repository.PacienteRepository;
import br.com.magnasistemas.api_saude.validators.interfaces.consulta.AtualizarConsultaValidator;

@Component
public class ValidadorConsultaAtualizacao implements AtualizarConsultaValidator {
	
	@Autowired
	MedicoRepository medicoRepository;
	
	@Autowired
	EspecialidadeRepository especialidadeRepository;
	
	@Autowired
	PacienteRepository pacienteRepository;

	@Override
	public void validador(DadosAtualizarConsulta dados) {
		if(!medicoRepository.existsById(dados.idMedico())) {
			throw new ArgumentoInvalidoException("O médico passado não existe!");
		}
		
		if(!especialidadeRepository.existsById(dados.idEspecialidade())) {
			throw new ArgumentoInvalidoException("A especialidade passada não existe!");
		}
		
		if(!pacienteRepository.existsById(dados.idPaciente())) {
			LocalDateTime localDateTime = dataHora.toLocalDateTime();
			int horaConsulta = localDateTime.getHour();
			int diaSemana = localDateTime.getDayOfWeek().getValue();
			
			List<Consulta> consultaBanco1 = consultaRepository.consultaPorDia(idPaciente, dataHora);
			List<Consulta> consultaBanco2 = consultaRepository.horarioMedico(idMedico, dataHora);
			
//			return !(horaConsulta + 1 >= 18 || horaConsulta < 9 || diaSemana == 6 || diaSemana == 7 
//			        || !consultaBanco1.isEmpty() || !consultaBanco2.isEmpty());
			if(horaConsulta + 1 >= 18 || horaConsulta < 9 || diaSemana == 6 || diaSemana == 7 || !consultaBanco1.isEmpty()
					||  !consultaBanco2.isEmpty()) {
				throw new ArgumentoInvalidoException("Não é possível marcar uma consulta nesse horário e data!");
			}
			
		}

	}

}
